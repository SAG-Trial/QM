name: Call Conditional Vault login
on:
    workflow_dispatch: 
    push: 
        branches: [ main ]
    workflow_call:
    
 

jobs:
    get-jwt-token:
        env:
            aud: https://github.com/SAG-Trial
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-latest
        outputs:
            signedJWTencoded: ${{ steps.generate-oidc-token.outputs.SIGNED_JWT_ENCODED_BASE64 }}
        steps:
            - name: Generate OIDC Token
              id: generate-oidc-token
              run: |
                SIGNED_JWT_ENCODED_BASE64=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${{env.aud}}" | base64)

                echo $SIGNED_JWT_ENCODED_BASE64

                # echo "::set-output name=SIGNED_JWT_ENCODED_BASE64::$SIGNED_JWT_ENCODED_BASE64"

                echo -n "SIGNED_JWT_ENCODED_BASE64=$SIGNED_JWT_ENCODED_BASE64" >> $GITHUB_OUTPUT

                # echo "::add-mask::$qmTrigger"
                # echo "QM_TRIGGER_TOKEN=$qmTrigger" >> $GITHUB_OUTPUT

                # curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | \
                # jq "{ jwt: .value, role: \"test-role\" }" > ./token.json

                # echo 'GitHub Actions Token Claims'
                # cat ./token.json | jq -r '.jwt | split(".") | .[1] | @base64d' | jq 


            # - name: Generate OIDC Token
            #   id: generate-oidc-token  
            #   uses: SAG-Trial/QM/.github/actions/GenerateOIDCToken@main
    reuse-conditional-vault:
        needs: get-jwt-token
        permissions:
            id-token: write
            contents: read
        uses: SAG-Trial/QM/.github/workflows/conditional-vault.yaml@main
        with:
            PARENT_TOKEN: ${{ needs.get-jwt-token.outputs.signedJWTencoded }}
        